"""
Charging station data
"""
type ChargingStation {
    """
    Unique identifier of the charging station
    """
    id: Int!
    """
    Name of the charging station
    """
    name: String!
    """
    Address of the charging station
    """
    address: String!
    """
    City of the charging station
    """
    city: String!
    """
    Latitude of the charging station
    """
    latitude: Float!
    """
    Longitude of the charging station
    """
    longitude: Float!
    """
    Number of available charging points
    """
    available: Int!
    """
    Number of total charging points
    """
    total: Int!
    """
    True if the charging is labeled as free parking
    """
    freeParking: Boolean
    """
    Operator of the charging station
    """
    operator: String
}

"""
Parking data
"""
type ParkingData {
    """
    Timestamp of the last update from the source
    """
    updated: String!
    """
    List of parking lots
    """
    lots: [ParkingLot!]!
}

"""
Parking lot data
"""
type ParkingLot {
    """
    Name of the parking lot
    """
    name: String!
    """
    Category of the parking lot (parking garage, parking lot, etc.)
    """
    category: String!
    """
    Number of available parking spaces
    """
    available: Int!
    """
    Total number of parking spaces
    """
    total: Int!
    """
    tendency of the parking lot (-1 : decreasing, 0 : stable, 1 : increasing) or null if not available
    """
    tendency: Int
    """
    Static price level of the parking lot between 0 (free) and 3 (expensive) or null if not available
    """
    priceLevel: Int
}

"""
Meal data
"""
type Meal {
    """
    Name of the meal in different languages
    """
    name: MultiLanguageString!
    """
    Unique identifier of the meal
    """
    id: ID!
    """
    Category of the meal (main, soup or salad)
    """
    category: String!
    """
    Prices for different types of customers (student, employee, guest)
    """
    prices: Prices!
    """
    List of allergens (e.g. gluten, lactose, etc.)
    """
    allergens: [String]
    """
    List of flags (e.g. vegan, vegetarian, etc.)
    """
    flags: [String]
    """
    Nutritional values for the meal
    """
    nutrition: Nutrition
    """
    Variants or toppings of the meal, like bread, sauce, etc.
    """
    variants: [Variation!]
    """
    Original language of the meal name
    """
    originalLanguage: OriginalLanguage!
    """
    Static meals are always available, non-static meals are only available on specific days
    """
    static: Boolean!
    """
    Restaurant where the meal is available (IngolstadtMensa, NeuburgMensa, Reimanns, Canisius)
    """
    restaurant: String!
}

"""
Variants of a meal
"""
type Variation {
    """
    Name of the variant in different languages
    """
    name: MultiLanguageString!
    """
    True if the variant is an additional topping and not a variant of the meal
    """
    additional: Boolean!
    """
    Prices for different types of customers (student, employee, guest)
    """
    prices: Prices!
    """
    Unique identifier of the variant
    """
    id: ID!
    """
    List of allergens (e.g. gluten, lactose, etc.)
    """
    allergens: [String]
    """
    List of flags (e.g. vegan, vegetarian, etc.)
    """
    flags: [String]
    """
    Nutritional values for the variant
    """
    nutrition: Nutrition
    """
    Original language of the variant name
    """
    originalLanguage: OriginalLanguage!
    """
    Static variants are always available, non-static variants are only available on specific days
    """
    static: Boolean!
    """
    Restaurant where the variant is available (IngolstadtMensa, NeuburgMensa, Reimanns, Canisius)
    """
    restaurant: String
    """
    Parent meal for a variant meal
    """
    parent: Parent
}

"""
Nutritional values for a meal. Currently only available at Mensa. Values are per average portion.
"""
type Nutrition {
    """
    Energy in kilojoules
    """
    kj: Float!
    """
    Energy in kilocalories
    """
    kcal: Float!
    """
    Fat in grams
    """
    fat: Float!
    """
    Saturated fat in grams
    """
    fatSaturated: Float!
    """
    Carbohydrates in grams
    """
    carbs: Float!
    """
    Sugar in grams
    """
    sugar: Float!
    """
    Fiber in grams
    """
    fiber: Float!
    """
    Protein in grams
    """
    protein: Float!
    """
    Salt in grams
    """
    salt: Float!
}

"""
Original language of the meal name
"""
enum OriginalLanguage {
    """
    German language code
    """
    de
    """
    English language code
    """
    en
}

"""
Prices for different types of customers
"""
type Prices {
    """
    Price for students
    """
    student: Float
    """
    Price for employees
    """
    employee: Float
    """
    Price for guests
    """
    guest: Float
}

"""
Provides a list of meals for a specific day
"""
type Food {
    """
    Date of the meal list
    """
    timestamp: String!
    """
    List of meals
    """
    meals: [Meal!]
}

"""
Error message for the food query
"""
type FoodError {
    """
    Location of the restaurant
    """
    location: String!
    """
    Error message
    """
    message: String!
}

type FoodResponse {
    """
    List of meal days
    """
    foodData: [Food!]
    """
    Error message for the food query
    """
    errors: [FoodError!]
}

"""
Parent meal for a variant meal
"""
type Parent {
    """
    Unique identifier of the parent meal
    """
    id: ID!
    """
    Category of the parent meal (main, soup or salad)
    """
    category: String!
    """
    Name of the parent meal in different languages
    """
    name: MultiLanguageString!
}

"""
Campus Life Event
"""
type ClEvent {
    """
    Unique identifier of the event
    """
    id: ID!
    """
    Organizer of the event
    """
    organizer: String! @deprecated(reason: "Use host field instead")
    """
    Host of the event
    """
    host: Host!
    """
    Title of the event in German
    """
    title: String!
    """
    Begin of the event
    """
    begin: String
    """
    End of the event
    """
    end: String
    """
    Location of the event (only available if it's eligible for external sharing)
    """
    location: String
    """
    Description of the event (only available if it's eligible for external sharing)
    """
    description: String
}

"""
Host of the event, usually a club or student group
"""
type Host {
    """
    Name of the event host
    """
    name: String!
    """
    URL to the event host website
    """
    website: URL
    """
    Instagram URL of the event host
    """
    instagram: URL
}

"""
Charging station data
"""
type Bus {
    """
    Code of the bus route, like 10, N1, etc.
    """
    route: String!
    """
    Destination of the bus route
    """
    destination: String!
    """
    Planned time at the station
    """
    time: String!
}

"""
Train data
"""
type Train {
    """
    Name of the train
    """
    name: String!
    """
    Destination of the train
    """
    destination: String!
    """
    Planned departure time
    """
    plannedTime: String
    """
    Actual departure time
    """
    actualTime: String
    """
    True if the train is canceled
    """
    canceled: Boolean!
    """
    Track of the train
    """
    track: String
    """
    URL to the train information
    """
    url: String
}

"""
Announcement data to display on top of the apps dashboard
"""
type Announcement {
    """
    Unique identifier of the announcement
    """
    id: ID!
    """
    Title of the announcement in different languages
    """
    title: MultiLanguageString!
    """
    Description of the announcement in different languages
    """
    description: MultiLanguageString!
    """
    Start date and time when the announcement is displayed
    """
    startDateTime: DateTime!
    """
    End date and time when the announcement is displayed
    """
    endDateTime: DateTime!
    """
    Priority of the announcement, higher are more important
    """
    priority: Int!
    """
    URL to the announcement
    """
    url: String
    """
    Creation date of the announcement
    """
    createdAt: DateTime!
    """
    Last update date of the announcement
    """
    updatedAt: DateTime!
}

"""
String in multiple languages (German and English)
"""
type MultiLanguageString {
    """
    German language code
    """
    de: String
    """
    English language code
    """
    en: String
}

"""
Root query
"""
type Query {
    """
    Get the current parking data in Ingolstadt
    """
    parking: ParkingData!
    """
    Get the current electric vehicle charging stations in Ingolstadt
    """
    charging: [ChargingStation!]!
    """
    Get the meal plan for a specific restaurant
    """
    food(locations: [String!]): FoodResponse!
    """
    Get the campus life events
    """
    clEvents: [ClEvent!]!
    """
    Get the current bus departures at a specific station
    """
    bus(station: String!): [Bus!]!
    """
    Get the current train departures at a specific station
    """
    train(station: String!): [Train!]!
    """
    Get the current announcements
    """
    announcements: [Announcement!]!
        @deprecated(reason: "Use appAnnouncements query instead")
    """
    Get the current in app announcements
    """
    appAnnouncements: [Announcement!]!
    """
    Get the university sports events
    """
    universitySports: [UniversitySports!] # This returns a list of all sports
}

"""
Enum representing the different locations of THI.
"""
enum CampusType {
    Ingolstadt
    Neuburg
}

"""
Enum representing the different weekdays.
"""
enum WeekdayType {
    Monday
    Tuesday
    Wednesday
    Thursday
    Friday
    Saturday
    Sunday
}

"""
Enum representing the different sports categories.
"""
enum SportsCategoryType {
    Basketball
    Soccer
    Calisthenics
    Dancing
    StrengthTraining
    Running
    Jogging
    Handball
    Frisbee
    Volleyball
    Spikeball
    FullBodyWorkout
    Defense
    Yoga
    Meditation
    Tennis
    Badminton
    Swimming
    Waterpolo
    Cycling
    Climbing
    Boxing
    Kickboxing
    MartialArts
    TableTennis
    Rowing
    Baseball
    Skateboarding
    Parkour
    Hiking
    Hockey
    Other
}

"""
University sports event data
"""
type UniversitySports {
    """
    Unique identifier of the sports event
    """
    id: ID!
    """
    Title of the sports event in different languages
    """
    title: MultiLanguageString!
    """
    Description of the sports event in different languages
    """
    description: MultiLanguageString
    """
    Campus where the sports event belongs to. This is not the location of the event itself.
    """
    campus: CampusType!
    """
    Location of the sports event
    """
    location: String!
    """
    Weekday of the sports event
    """
    weekday: WeekdayType!
    """
    Start time of the sports event
    """
    startTime: LocalTime!
    """
    End time of the sports event
    """
    endTime: LocalTime
    """
    True if the sports event requires registration
    """
    requiresRegistration: Boolean!
    """
    Invitation link for the sports event, e.g. a WhatsApp group
    """
    invitationLink: String
    """
    E-Mail address for registration or contact
    """
    eMail: EmailAddress
    """
    Category of the sports event (e.g. soccer, basketball, etc.)
    """
    sportsCategory: SportsCategoryType!
    """
    Creation date of the sports event
    """
    createdAt: DateTime!
    """
    Last update date of the sports event
    """
    updatedAt: DateTime!
}

input MultiLanguageStringInput {
    en: String!
    de: String!
}

"""
Input type for the university sports event
"""
input UniversitySportsInput {
    """
    Title of the sports event in different languages
    """
    title: MultiLanguageStringInput!
    """
    Description of the sports event in different languages
    """
    description: MultiLanguageStringInput
    """
    Campus where the sports event belongs to. This is not the location of the event itself.
    """
    campus: CampusType!
    """
    Location of the sports event
    """
    location: String!
    """
    Weekday of the sports event
    """
    weekday: WeekdayType!
    """
    Start time of the sports event as Unix timestamp
    """
    startTime: LocalTime!
    """
    End time of the sports event as Unix timestamp
    """
    endTime: LocalTime
    """
    True if the sports event requires registration
    """
    requiresRegistration: Boolean!
    """
    Invitation link for the sports event, e.g. a WhatsApp group
    """
    invitationLink: String
    """
    E-Mail address for registration or contact
    """
    eMail: EmailAddress
    """
    Category of the sports event (e.g. soccer, basketball, etc.)
    """
    sportsCategory: SportsCategoryType!
}

"""
Input type for the announcement
"""
input AnnouncementInput {
    """
    Title of the announcement in different languages
    """
    title: MultiLanguageStringInput!
    """
    Description of the announcement in different languages
    """
    description: MultiLanguageStringInput!
    """
    Start date and time when the announcement is displayed
    """
    startDateTime: DateTime!
    """
    End date and time when the announcement is displayed
    """
    endDateTime: DateTime!
    """
    Priority of the announcement, higher are more important
    """
    priority: Int!
    """
    URL to the announcement
    """
    url: String
}

"""
Mutation type to update data
"""
type Mutation {
    """
    Create or update a university sports event. If an ID is provided, the event is updated, otherwise a new event is created.
    """
    upsertUniversitySport(id: ID, input: UniversitySportsInput!): UpsertResponse
    """
    Delete a university sports event by ID
    """
    deleteUniversitySport(id: ID!): Boolean
    """
    Create or update an announcement. If an ID is provided, the announcement is updated, otherwise a new announcement is created.
    """
    upsertAppAnnouncement(id: ID, input: AnnouncementInput!): UpsertResponse
    """
    Delete an announcement by ID
    """
    deleteAppAnnouncement(id: ID!): Boolean
}

type UpsertResponse {
    id: ID
}

scalar DateTime
scalar LocalTime
scalar EmailAddress
scalar URL
